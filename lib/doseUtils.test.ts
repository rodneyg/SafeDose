import { calculateDose } from './doseUtils';
import { UserProfile } from '@/contexts/AuthContext'; // Adjust path as per your project structure

describe('calculateDose - UserProfile Impact', () => {
  const baseParams = {
    doseValue: 10,
    concentration: 2, // 10mg / 2mg/ml = 5ml
    unit: 'mg' as 'mg',
    concentrationUnit: 'mg/ml' as 'mg/ml',
    manualSyringe: { type: 'Standard' as 'Standard', volume: '10 ml' },
    totalAmount: 100,
    solutionVolume: null,
  };

  const healthProfessionalProfile: UserProfile = {
    isHealthProfessional: true,
    isPersonalUse: false,
    useType: 'Prescribed', // Or any other, not relevant for this specific note
  };

  const personalCosmeticUserProfile: UserProfile = {
    isHealthProfessional: false,
    isPersonalUse: true,
    useType: 'Cosmetic',
  };

  const combinedUserProfile: UserProfile = {
    isHealthProfessional: true,
    isPersonalUse: true,
    useType: 'Cosmetic',
  };

  test('should prepend "[Professional Use]" for health professionals when no other error', () => {
    // To ensure no precision error, make dose perfectly align with a hypothetical marking if necessary
    // For this test, we assume no other error message is generated by default with baseParams.
    // If baseParams naturally creates a precision error, this test needs adjustment or the baseParams refined.
    const params = { ...baseParams, userProfile: healthProfessionalProfile };
    const result = calculateDose(params);
    // If there was a precision message like "Calculated dose is X. Nearest mark is Y."
    // It should become "[Professional Use] Calculated dose is X. Nearest mark is Y."
    // If no error, it becomes "[Professional Use] "
    // Let's assume for this test, no precision error from baseParams
    // To make it more robust, let's simulate a small precision error that would exist without the profile.
    const paramsWithPrecisionIssue = { ...baseParams, doseValue: 10.1, concentration: 2 }; // 5.05 ml
    const resultWithoutProfile = calculateDose(paramsWithPrecisionIssue);

    const resultWithProfile = calculateDose({ ...paramsWithPrecisionIssue, userProfile: healthProfessionalProfile });

    if (resultWithoutProfile.calculationError) {
      expect(resultWithProfile.calculationError).toBe(`[Professional Use] ${resultWithoutProfile.calculationError}`);
    } else {
      // This case might be less common if usually there's some minor note or perfect calculation
      expect(resultWithProfile.calculationError).toBe("[Professional Use] ");
    }
  });

  test('should append "Note: Cosmetic use..." for personal cosmetic users when no other error', () => {
    const params = { ...baseParams, userProfile: personalCosmeticUserProfile };
     // Simulate a small precision error
    const paramsWithPrecisionIssue = { ...baseParams, doseValue: 10.1, concentration: 2 }; // 5.05 ml
    const resultWithoutProfile = calculateDose(paramsWithPrecisionIssue);
    const resultWithProfile = calculateDose({ ...paramsWithPrecisionIssue, userProfile: personalCosmeticUserProfile });

    if (resultWithoutProfile.calculationError) {
      expect(resultWithProfile.calculationError).toBe(`${resultWithoutProfile.calculationError} Note: Cosmetic use may have different considerations.`);
    } else {
      expect(resultWithProfile.calculationError).toBe("Note: Cosmetic use may have different considerations.");
    }
  });

  test('should include both notes for combined profile (health professional, personal cosmetic)', () => {
    const params = { ...baseParams, userProfile: combinedUserProfile };
    // Simulate a small precision error
    const paramsWithPrecisionIssue = { ...baseParams, doseValue: 10.1, concentration: 2 }; // 5.05 ml
    const resultWithoutProfile = calculateDose(paramsWithPrecisionIssue);
    const resultWithProfile = calculateDose({ ...paramsWithPrecisionIssue, userProfile: combinedUserProfile });

    // Expected order: Professional note, then original error, then cosmetic note.
    // The actual implementation in doseUtils.ts is: `"[Professional Use] " + existingError + "Cosmetic Note"`
    // Or if existingError is null: `"[Professional Use] " + "Cosmetic Note"`

    let expectedMessage = "[Professional Use] ";
    if (resultWithoutProfile.calculationError) {
        expectedMessage += resultWithoutProfile.calculationError + " "; // space before appending next note
    }
    expectedMessage += "Note: Cosmetic use may have different considerations.";
    //The actual implementation joins them as "[Professional Use] Note: Cosmetic use..." if no base error, or "[Professional Use] baseErrorNote: Cosmetic use..."
    //Let's refine based on actual implementation:
    // if (userProfile.isHealthProfessional) profileNotes = "[Professional Use] ";
    // if (userProfile.isPersonalUse && userProfile.useType === 'Cosmetic') profileNotes += "Note: Cosmetic use may have different considerations.";
    // calculationError = calculationError ? `${profileNotes} ${calculationError}` : profileNotes;
    // This means if calculationError exists, it becomes: "[Professional Use] Note: Cosmetic use... ORIGINAL_ERROR"
    // If calculationError is null, it becomes: "[Professional Use] Note: Cosmetic use..."

    if (resultWithoutProfile.calculationError) {
      //The current implementation is: `profileNotes + " " + calculationError`
      //So it would be "[Professional Use] Note: Cosmetic use may have different considerations. ACTUAL_ERROR"
       expect(resultWithProfile.calculationError).toBe(`[Professional Use] Note: Cosmetic use may have different considerations. ${resultWithoutProfile.calculationError}`);
    } else {
       expect(resultWithProfile.calculationError).toBe("[Professional Use] Note: Cosmetic use may have different considerations.");
    }
  });

  test('should not add profile notes if userProfile is null or not provided', () => {
    const paramsWithPrecisionIssue = { ...baseParams, doseValue: 10.1, concentration: 2, userProfile: null };
    const resultWithNullProfile = calculateDose(paramsWithPrecisionIssue);

    const paramsWithoutProfileField = { ...baseParams, doseValue: 10.1, concentration: 2 };
    // remove userProfile field explicitly for this test case
    delete (paramsWithoutProfileField as any).userProfile;
    const resultWithoutProfileField = calculateDose(paramsWithoutProfileField);

    // Assuming 10.1 / 2 results in a precision error message
    expect(resultWithNullProfile.calculationError).not.toContain("[Professional Use]");
    expect(resultWithNullProfile.calculationError).not.toContain("Note: Cosmetic use");

    expect(resultWithoutProfileField.calculationError).not.toContain("[Professional Use]");
    expect(resultWithoutProfileField.calculationError).not.toContain("Note: Cosmetic use");

    // It should be the base error message if one exists
    const baseResult = calculateDose({ ...baseParams, doseValue: 10.1, concentration: 2 });
    expect(resultWithNullProfile.calculationError).toBe(baseResult.calculationError);
    expect(resultWithoutProfileField.calculationError).toBe(baseResult.calculationError);
  });

  test('should add profile notes to existing critical errors', () => {
    const paramsCritical = { ...baseParams, doseValue: 500, userProfile: healthProfessionalProfile }; // Dose exceeds totalAmount
    const result = calculateDose(paramsCritical);
    expect(result.calculationError).toContain("[Professional Use]");
    expect(result.calculationError).toMatch(/exceeds total amount available|exceeds syringe capacity/); // Example critical errors
  });

  test('should correctly combine notes when base error is null', () => {
    // Ensure doseValue and concentration result in no precision error for base case
    // This might require knowing the exact marking logic or ensuring perfect divisibility
    // For simplicity, let's assume baseParams is already perfect
    const perfectCalcParams = { ...baseParams, userProfile: combinedUserProfile };
    const result = calculateDose(perfectCalcParams);
    // If no base error, the notes should be combined directly.
    // Current impl: profileNotes = prof + cosmetic; calculationError = profileNotes (if no base error)
    expect(result.calculationError).toBe("[Professional Use] Note: Cosmetic use may have different considerations.");
  });

});
